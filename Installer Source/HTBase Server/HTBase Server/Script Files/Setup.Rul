//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"

STRING szHTConsoleBackupkey,szHTConsoleClusterkey,szBothkey;
STRING szHTConsoleBackupdefkey,szHTConsoleClusterdefkey,szBothdefkey; 
BOOL   bHTBaseClient;
//---------------------------------------------------------------------------
// OnBegin
//
// The OnBegin event is called directly by the framework after the setup
// initializes. Note that this event will be called AFTER "Initialization"
// events (i.e.) OnSetTARGETDIR, OnCheckMediaPassword.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnBegin() 
number nvType,nvSize;
string svValue;
begin 
bHTBaseClient=FALSE;
if (RegDBGetKeyValueEx("Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{FC03ED81-4B1F-4213-9E72-0ED457945325}", "DisplayName", nvType, svValue, nvSize) ==0) then
 	 	bHTBaseClient=TRUE;
 	 endif;
    // TODO: Perform custom initialization steps, check requirements, etc.
end;
//---------------------------------------------------------------------------                                                                        
// OnFirstUIBefore
//
// First Install UI Sequence - Before Move Data
//
// The OnFirstUIBefore event is called by OnShowUI when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    number  nResult, nLevel, nSize, nSetupType;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile;
    string  szName, szCompany, szTargetPath, szDir, szFeatures;
    BOOL    bLicenseAccepted;  
    number  nResultSetupType,nReserved;
    string  szComponents;
begin	
    szHTConsoleBackupdefkey="HT5LP-NM7DS-2CX3L-2109N-ZA9VA";
    szHTConsoleClusterdefkey="HT3XZ-GF9XP-7JQ3A-9867L-DA9LA"; 
    szBothdefkey="HT4GA-KQ4AX-9FA2O-1994J-JA8MA";
    szHTConsoleBackupkey="";
    szHTConsoleClusterkey="";
    szBothkey="";
    
   
    // Added in InstallShield 15 - Show an appropriate error message if
    // -removeonly is specified and the product is not installed.
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
   
    nSetupType = COMPLETE;
    TARGETDIR = PROGRAMFILES ^ "HTBase Corp";	
    szDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdWelcome)
    nResult = SdWelcome( szTitle, szMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdWelcome)
    if (nResult = BACK) goto Dlg_Start;   
    
Dlg_SdLicense2:
    szTitle = "";
    szOpt1 = "";
    szOpt2 = "";
    //{{IS_SCRIPT_TAG(License_File_Path)
    szLicenseFile = SUPPORTDIR ^ "License.rtf";
    //}}IS_SCRIPT_TAG(License_File_Path)
    //{{IS_SCRIPT_TAG(Dlg_SdLicense2)
    nResult = SdLicense2Ex( szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted, TRUE );
    //}}IS_SCRIPT_TAG(Dlg_SdLicense2)
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        bLicenseAccepted = TRUE;
    endif;

Dlg_SdAskDestPath:
 	nResultSetupType = SdSetupType2 (szTitle , "", szDir, nReserved);
   	TARGETDIR = szDir;
	if nResultSetupType=COMPLETE then
	
	elseif nResultSetupType=CUSTOM then
		
	elseif nResultSetupType=BACK then
		goto Dlg_SdLicense2;
	endif;   
	
Dlg_CustomSetup:
	if nResultSetupType=CUSTOM then
		
		szTitle    = "";
	    szMsg      = "";
	    szComponents = "";
		nLevel = 2;
		nResult = SdComponentTree(szTitle, szMsg, TARGETDIR, szComponents, nLevel);
		if nResult=NEXT then
			if (!(FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup"))  
			 && !(FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster"))) then
			    	MessageBox( "Please select at least one component", WARNING );
				    goto Dlg_CustomSetup;
			endif;
			
			
		else
			goto Dlg_SdAskDestPath;
		endif;
	endif; 
if ((FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup")) && (FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster"))) then
	Dlg_BothKeys:
		nResult=SdShowDlgEdit1("HTBackup and HTCluster key Configuration", "Provide the serial key from the following field.", "Serial Key", szBothkey);
		if nResult=NEXT then
			if(szBothkey = "" ) then
				MessageBox ("Serial key field is empty.", WARNING);				 				
				goto Dlg_BothKeys; 
			
			else 
				if szBothkey=szBothdefkey then
				else
				   MessageBox("The Serial key do not match. Please re-enter the Serial key.",SEVERE);
					goto Dlg_BothKeys;
				endif;
				
			endif;			
		  else
			if nResultSetupType=CUSTOM then
			  	goto Dlg_CustomSetup;
			elseif nResultSetupType=COMPLETE then
				 goto Dlg_SdAskDestPath;
			endif; 
				
		   endif;
endif; 
if ((FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup")) && !(FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster")))then 
	Dlg_HTBackup:
		nResult=SdShowDlgEdit1("HTConsole and HTBackup key Configuration", "Provide the serial key of HTConsole+HTBackup from the following field.", "HTConsole+HTBackup Key", szHTConsoleBackupkey);
		if nResult=NEXT then
			if(szHTConsoleBackupkey = "" ) then
				MessageBox ("HTConsole+HTBackup Key field is empty.", WARNING);				 				
				goto Dlg_HTBackup; 
			
			else 
				if  szHTConsoleBackupkey= szHTConsoleBackupdefkey then
				else
					MessageBox("The Serial key do not match. Please re-enter the Serial key in the HTConsole+HTBackup Key field.",SEVERE);
						goto Dlg_HTBackup;
				endif;
				
			endif;			
		  else
			if nResultSetupType=CUSTOM then
			  	goto Dlg_CustomSetup;
			elseif nResultSetupType=COMPLETE then
				 goto Dlg_SdAskDestPath;
			endif; 
				
		   endif;
	endif;
		   
if ((FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster")) && !(FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup")))then 
	Dlg_HTCluster:
		nResult=SdShowDlgEdit1("HTConsole+HTCluster key Configuration", "Provide the serial key of HTConsole+HTCluster from the following field.", "HTConsole+HTCluster Key", szHTConsoleClusterkey);
		if nResult=NEXT then
			if(szHTConsoleClusterkey = "" ) then
				MessageBox ("HTConsole+HTCluster Key  field is empty.", WARNING);				 				
				goto Dlg_HTCluster; 
			
			else 
				if szHTConsoleClusterkey=szHTConsoleClusterdefkey then
				else
					MessageBox("The Serial key do not match. Please re-enter the Serial key in the HTConsole+HTCluster Key field.",SEVERE);
					goto Dlg_HTCluster;
				endif;
				
			endif;			
		  else
			if nResultSetupType=CUSTOM then
			  	goto Dlg_CustomSetup;
			elseif nResultSetupType=COMPLETE then
				 goto Dlg_SdAskDestPath;
			endif; 
				
		   endif;
	endif;
Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if (nResult = BACK) then
    	if ((FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup")) && (FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster"))) then
     		goto Dlg_BothKeys;
     	elseif ((FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup")) && !(FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster"))) then
     		goto Dlg_HTBackup;
     	elseif ((FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster")) && !(FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup"))) then 
     		goto Dlg_HTCluster;
     	endif;
    endif;     		
Dlg_SdStartCopy2:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdStartCopy2)	
    nResult = SdStartCopy2( szTitle, szMsg );	
    //}}IS_SCRIPT_TAG(Dlg_SdStartCopy2)
    if (nResult = BACK) goto Dlg_ObjDialogs;

    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    RegDBCreateKeyEx  ( "Software\\HTBase Corp\\" + IFX_PRODUCT_NAME, "");
	RegDBCreateKeyEx  ( "Software\\HTBase Corp\\" + IFX_PRODUCT_NAME + "\\" + IFX_PRODUCT_VERSION, "");	                    
	RegDBSetKeyValueEx( "Software\\HTBase Corp\\" + IFX_PRODUCT_NAME, "Version", REGDB_STRING, IFX_PRODUCT_VERSION, -1 );
    return 0;
end;
//---------------------------------------------------------------------------
// OnSetTARGETDIR
//
// OnSetTARGETDIR is called directly by the framework to initialize
// TARGETDIR to it's default value.
//
// Note: This event is called for all setups.
//---------------------------------------------------------------------------
function OnSetTARGETDIR()
number nId, nIgnore, nResult;
string szId, szTARGETDIR;
begin

    // In maintenance mode the value of TARGETDIR is read from the log file.
    if( MAINTENANCE ) then
        return ISERR_SUCCESS;
    endif;

    // Set TARGETDIR to script default.
    TARGETDIR = "<FOLDER_APPLICATIONS>\\<IFX_COMPANY_NAME>\\<IFX_PRODUCT_NAME>";

    // Read TARGETDIR from the media.
    nResult = MediaGetData( MEDIA, MEDIA_FIELD_TARGETDIR, nIgnore, szTARGETDIR );

    // Use the TARGETDIR from the media if anything was read.
    if( nResult >= ISERR_SUCCESS && StrLengthChars( szTARGETDIR ) ) then
        TARGETDIR = szTARGETDIR;
    endif;
        
	// Customize the default TARGETDIR for multi-instance application.
	// TODO: If you want something different customize the code below.	
	if( MAINT_OPTION = MAINT_OPTION_MULTI_INSTANCE  && MULTI_INSTANCE_COUNT > 0) then

		// Start with the current multi-instance count plus one.
		nId = MULTI_INSTANCE_COUNT + 1;

		// Find a unique TARGETDIR.
		while( ExistsDir( TARGETDIR ) = EXISTS )
			
			// Convert to string.
			NumToStr( szId, nId );
			
			// Update IFX_MULTI_INSTANCE_SUFFIX
			IFX_MULTI_INSTANCE_SUFFIX = "_" + szId;
		
			// Update TARGETDIR
			TARGETDIR = TARGETDIR + IFX_MULTI_INSTANCE_SUFFIX;
			
			// Update nId
			nId = nId + 1;

		endwhile;

	endif;

end;
//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
    string szUpdateMsg;
	NUMBER nType;
begin
    if ((FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup")) && !(FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster")))then 
    	DeleteDir(TARGETDIR ^ "HTBase" ^ "HTCluster", ALLCONTENTS);
    endif;
    	if ((FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTCluster")) && !(FeatureIsItemSelected(MEDIA, "HTBase\\HTConsole+HTBackup")))then 
    		DeleteDir(TARGETDIR ^ "HTBase" ^ "HTBackup", ALLCONTENTS); 
    	endif;
    
    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    
    
    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)	
   // if ( BATCH_INSTALL ) then
   // 	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    //else
	    SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
	//endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)
    
end;
//---------------------------------------------------------------------------
// OnEnd
//
// The OnEnd event is called at the end of the setup. This event is not
// called if the setup is aborted.
//---------------------------------------------------------------------------
function OnEnd() 

begin  

end;
//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// Maintenance UI Sequence - Before Move Data
//
// The OnMaintUIBefore event is called by OnShowUI when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
    number	nResult, nType;
    string	szTitle, szMsg;
begin
	
	// nType defaults to MODIFY.
	nType = REMOVEALL;

    //Initialize SQL
    OnSQLServerInitializeMaint();

// Beginning of UI Sequence
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
    	// In standard mode show maintenance dialog
	    Disable( BACKBUTTON );
	    nType = SdWelcomeMaint( szTitle, szMsg, nType );
	    Enable( BACKBUTTON );
        nResult = NEXT;
    else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;

	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
			    goto Dlg_Start;
            endif;

		endif;
	endif;

Dlg_SdFeatureTree:
	if ( nType = MODIFY ) then
		szTitle = "";
		szMsg = SdLoadString( SD_STR_COMPONENT_MAINT_MSG );
		nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, "", -1 );
		if ( nResult = BACK ) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if ( ( nResult = BACK ) && ( nType != MODIFY ) ) goto Dlg_Start;
    if ( ( nResult = BACK ) && ( nType = MODIFY ) ) goto Dlg_SdFeatureTree;

	switch(nType)

        case REMOVEALL:
						
			// Ensure that all previously installed features are removed.
			FeatureRemoveAllInMediaAndLog();

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );
            RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
  			RegDBDeleteKey("SOFTWARE\\HTBase Corp\\" + IFX_PRODUCT_NAME);    			 		
    		RegDBDeleteValue("Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall","{789FC619-DFEF-4444-AF31-73F9572ECDD5}");
	 	
			if bHTBaseClient=FALSE then
            	DeleteDir(TARGETDIR ^"HTBase Corp" ^"HTBaseServer"^ "HTBackup", ALLCONTENTS);
            	DeleteDir(TARGETDIR ^"HTBase Corp" ^"HTBaseServer"^ "HTCluster", ALLCONTENTS);
            	DeleteDir(TARGETDIR ^"HTBase Corp" ^"HTBaseServer"^ "HTConsole", ALLCONTENTS);
            	DeleteDir(TARGETDIR ^"HTBase Corp" ^"HTBaseServer", ALLCONTENTS);
            	DeleteDir(TARGETDIR ^"HTBase Corp", ALLCONTENTS);
            else
                 
            	DeleteDir(TARGETDIR ^"HTBase Corp" ^"HTBaseServer"^ "HTBackup", ALLCONTENTS);
            	DeleteDir(TARGETDIR ^"HTBase Corp" ^"HTBaseServer"^ "HTCluster", ALLCONTENTS);
            	DeleteDir(TARGETDIR ^"HTBase Corp" ^"HTBaseServer"^ "HTConsole", ALLCONTENTS);
            	DeleteDir(TARGETDIR ^"HTBase Corp" ^"HTBaseServer", ALLCONTENTS);
             endif;
        case REPAIR:
				
			// Changed for DevStudio 9, Disk1 files are now always updated when installed
			// so when running from ADDREMOVE we need to prevent these files from being
			// updated since this will result in files being updated that are locked by the setup.
			// Updating these files when running from ADDREMOVE should not be needed since updates
			// are not run directly from Add/Remove.
            if( ADDREMOVE ) then
                // Reinstall all previously installed features, except
                // disk1 features.
                FeatureUpdate( "" );
            else
                // Reinstall all previously installed features.
                FeatureReinstall();
            endif;

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REPAIR ) );

        case MODIFY:
            
            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_MODIFY ) );

    endswitch;
 
end;
//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;  
    string szUpdateMsg;
	number nType;
begin

    ShowObjWizardPages(NEXT);
    
    // Added - Version 9.5 - Use appropriate strings for complete
    // uninstall.
    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	szMsg2 = "";    
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    

    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else    
       	SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
    endif;
    
end;